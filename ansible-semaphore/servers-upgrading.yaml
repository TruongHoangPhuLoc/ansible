- hosts: all
  user: locthp
  become: true
  serial: 1
  tasks:
  - block:
    - name: Update cache the Ubuntu servers to be latest
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true
      when: ansible_distribution == "Ubuntu"
      async: 7200
      poll: 5
      register: update_result
    - name: Upgrade the Ubuntu servers to be latest
      ansible.builtin.apt:
        force_apt_get: true
        upgrade: "yes"
      when: ansible_distribution == "Ubuntu"
      register: update_result
      async: 3600
      poll: 5
      notify:
        - Prepare content of message
        - Set dashes
        - Add dashes
        - Add uptime if server reboot
    rescue:
    - name: Update admin when a failure on update/upgrade occurs
      debug:
        msg: "{{ ansible_hostname }} {{ update_result.msg }}"
      # Dirty trick to run notify :)))
      changed_when: update_result.msg is defined
      # Send a message of error cause
      notify:
        - Prepare content of error cause
        - Set dashes
        - Add dashes
  - name: Check if a reboot is required.
    ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no
    when: ansible_distribution == "Ubuntu"
    register: reboot_required_file  
  - name: Reboot the server (if required).
    ansible.builtin.reboot:
      reboot_timeout: 3600
    when: reboot_required_file.stat.exists == true
    register: reboot_result
  - name: Check uptime
    shell: "uptime"
    register: uptime
    when: reboot_result.changed
  handlers:
  - name: Prepare content of message
    ansible.builtin.set_fact:
        notification: "Host {{ ansible_hostname }} has been upgraded successfully \n"
  - name: Prepare content of error cause
    ansible.builtin.set_fact:
        notification: "Host {{ ansible_hostname }}: {{ update_result.msg }} \n"
  - name: Add uptime if server reboot
    ansible.builtin.set_fact:
        notification: "{{ notification }} Host {{ ansible_hostname }} has just been rebooted: {{ uptime.stdout }} \n"
    when: uptime is defined

  - name: Set dashes
    ansible.builtin.set_fact:
        dashes: "-------------------------------------------------------------------------"  
    when: notification is defined

  - name: Add dashes
    ansible.builtin.set_fact:
      message: "{{ dashes + '\n' + notification + dashes + '\n'  }}"
    when: notification is defined
- hosts: localhost
  connection: local
  tasks:
  - name: Initialize mail message
    ansible.builtin.set_fact:
      patching_report: "Weekly patching report \n"
  - name: Get all messages from all hosts
    ansible.builtin.set_fact:
      patching_report: "{{ patching_report }} {{ hostvars[item]['message'] }}"
    with_items: " {{ groups['all'] }} "
    when: hostvars[item]['message'] is defined
  - name: Update admin's mail with patching report
    community.general.mail:
      host: "{{ lookup('env', 'smtp_host') }}"
      port: 587
      username: "{{ lookup('env', 'email_user') }}"
      password: "{{ lookup('env', 'email_passwd') }}"
      sender: "{{ lookup('env', 'email_user') }}"
      to: "{{ lookup('env', 'email_recipient') }}"
      subject: Patching report
      body: "{{ patching_report }}"

    
